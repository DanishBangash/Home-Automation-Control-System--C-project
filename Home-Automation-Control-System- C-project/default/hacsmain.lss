
hacsmain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  008000f8  008000f8  0000102e  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00002115  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000407  00000000  00000000  00002275  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001909  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ada  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001867  00000000  00000000  00004a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  000062c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000525  00000000  00000000  00006588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b98  00000000  00000000  00006aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001ea  00000000  00000000  00007645  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000782f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_1>
   8:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "RFIDstate.h"

	 int main()
	 {
	  	init();
  92:	0e 94 35 03 	call	0x66a	; 0x66a <init>
  		lcd_init();
  96:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
	 	init_uart( 0x40);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 1c 02 	call	0x438	; 0x438 <init_uart>
		SPI_MasterInit();
  a2:	0e 94 47 02 	call	0x48e	; 0x48e <SPI_MasterInit>
		key_init();
  a6:	0e 94 3c 01 	call	0x278	; 0x278 <key_init>
		  while (1)
		  {		
			 {	
			//	_delay_ms(10);
				EnterPassword();
  aa:	0e 94 bb 01 	call	0x376	; 0x376 <EnterPassword>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x18>

000000b0 <lcd_nibble_transfer>:


void lcd_nibble_transfer( unsigned char d )  
 
   { 
     lcd_port|= (1<<lcd_E);
  b0:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
  b2:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
  b4:	9b b3       	in	r25, 0x1b	; 27
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	89 2b       	or	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	88 ec       	ldi	r24, 0xC8	; 200
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_nibble_transfer+0x10>
  
  	
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
  c4:	db 98       	cbi	0x1b, 3	; 27
  c6:	88 ec       	ldi	r24, 0xC8	; 200
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
  cc:	08 95       	ret

000000ce <lcd_transfer>:
// Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
  ce:	1f 93       	push	r17
  d0:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
  d2:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
  d4:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
  d6:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
  dc:	00 00       	nop
		lcd_port |= (1<<lcd_E);
  de:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
  e0:	81 2f       	mov	r24, r17
  e2:	82 95       	swap	r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
 
   } // end lcd_transfer()
  ea:	1f 91       	pop	r17
  ec:	08 95       	ret

000000ee <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
  ee:	9a b3       	in	r25, 0x1a	; 26
  f0:	9c 6f       	ori	r25, 0xFC	; 252
  f2:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
  f4:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
  f6:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
  f8:	00 00       	nop

   lcd_transfer(d); 
  fa:	0e 94 67 00 	call	0xce	; 0xce <lcd_transfer>
   } // end lcd_data_write()
  fe:	08 95       	ret

00000100 <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
 100:	9a b3       	in	r25, 0x1a	; 26
 102:	9c 6f       	ori	r25, 0xFC	; 252
 104:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
 106:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
 108:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
 10a:	00 00       	nop
   lcd_transfer(cmd);
 10c:	0e 94 67 00 	call	0xce	; 0xce <lcd_transfer>
   } // end lcd_cmd_write()
 110:	08 95       	ret

00000112 <lcd_init>:
void lcd_init()    // Works like a constructor
   
   {

   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	8c 6f       	ori	r24, 0xFC	; 252
 116:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	83 7f       	andi	r24, 0xF3	; 243
 11c:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e5       	ldi	r24, 0x5F	; 95
 126:	9a ee       	ldi	r25, 0xEA	; 234
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x1c>
 12e:	00 00       	nop
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
 136:	8f e5       	ldi	r24, 0x5F	; 95
 138:	9a ee       	ldi	r25, 0xEA	; 234
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x28>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x2e>
 140:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
 148:	8f e5       	ldi	r24, 0x5F	; 95
 14a:	9a ee       	ldi	r25, 0xEA	; 234
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x3a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_init+0x40>
 152:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_nibble_transfer>
 15a:	8f e5       	ldi	r24, 0x5F	; 95
 15c:	9a ee       	ldi	r25, 0xEA	; 234
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_init+0x4c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_init+0x52>
 164:	00 00       	nop
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT); //                // Function set: 0x28  2 lines
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	93 e1       	ldi	r25, 0x13	; 19
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_init+0x5e>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_init+0x64>
 176:	00 00       	nop
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 17e:	87 e8       	ldi	r24, 0x87	; 135
 180:	93 e1       	ldi	r25, 0x13	; 19
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x70>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x76>
 188:	00 00       	nop
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 190:	87 e8       	ldi	r24, 0x87	; 135
 192:	93 e1       	ldi	r25, 0x13	; 19
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x82>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_init+0x88>
 19a:	00 00       	nop
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                  
                               

   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 1a2:	87 e8       	ldi	r24, 0x87	; 135
 1a4:	93 e1       	ldi	r25, 0x13	; 19
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x94>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_init+0x9a>
 1ac:	00 00       	nop
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 1b4:	87 e8       	ldi	r24, 0x87	; 135
 1b6:	93 e1       	ldi	r25, 0x13	; 19
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0xa6>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_init+0xac>
 1be:	00 00       	nop
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 1c6:	87 e8       	ldi	r24, 0x87	; 135
 1c8:	93 e1       	ldi	r25, 0x13	; 19
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0xb8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0xbe>
 1d0:	00 00       	nop
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
  
   } // end lcd_init()
 1d2:	08 95       	ret

000001d4 <lcdClear>:


//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
//lcd_wait(WAIT_15m);


}
 1e0:	08 95       	ret

000001e2 <LCDPutString>:




//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	e8 2e       	mov	r14, r24
 1ec:	e7 01       	movw	r28, r14
 1ee:	7e 01       	movw	r14, r28
 1f0:	f9 2e       	mov	r15, r25
 1f2:	e7 01       	movw	r28, r14
   char c;
for (; (c = *str) != 0; str++) lcd_data_write(c);
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <LCDPutString+0x18>
 1f6:	0e 94 77 00 	call	0xee	; 0xee <lcd_data_write>
 1fa:	89 91       	ld	r24, Y+
 1fc:	88 23       	and	r24, r24
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <LCDPutString+0x14>

  
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <lcd_wait>:
   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()

  

   } // end lcd_transfer()
 20a:	08 95       	ret

0000020c <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()

void GoTo(unsigned char x, unsigned char y){

switch (y) {
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	49 f0       	breq	.+18     	; 0x222 <GoTo+0x16>
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	28 f0       	brcs	.+10     	; 0x21e <GoTo+0x12>
 214:	62 30       	cpi	r22, 0x02	; 2
 216:	39 f0       	breq	.+14     	; 0x226 <GoTo+0x1a>
 218:	63 30       	cpi	r22, 0x03	; 3
 21a:	61 f4       	brne	.+24     	; 0x234 <GoTo+0x28>
 21c:	08 c0       	rjmp	.+16     	; 0x22e <GoTo+0x22>
case 0: 

 lcd_cmd_write(SET_DRAM_ADDR+line_0+x);
 21e:	80 58       	subi	r24, 0x80	; 128
 220:	03 c0       	rjmp	.+6      	; 0x228 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;

 case 1: 

lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 222:	80 54       	subi	r24, 0x40	; 64
 224:	01 c0       	rjmp	.+2      	; 0x228 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;

case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 226:	8c 56       	subi	r24, 0x6C	; 108
 228:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 22c:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;

case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 22e:	8c 52       	subi	r24, 0x2C	; 44
 230:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
 234:	08 95       	ret

00000236 <clearLine>:
//lcd_wait(WAIT_15m);


}

void clearLine(unsigned char x, unsigned char y){
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	18 2f       	mov	r17, r24
 240:	06 2f       	mov	r16, r22

unsigned char max_x=20;

GoTo(x,y);
 242:	0e 94 06 01 	call	0x20c	; 0x20c <GoTo>
for (int i=x; i<max_x; i++)
 246:	c1 2f       	mov	r28, r17
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	0a c0       	rjmp	.+20     	; 0x260 <clearLine+0x2a>
{
lcd_data_write(0x20);
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	0e 94 77 00 	call	0xee	; 0xee <lcd_data_write>
 252:	83 ec       	ldi	r24, 0xC3	; 195
 254:	99 e0       	ldi	r25, 0x09	; 9
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <clearLine+0x20>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <clearLine+0x26>
 25c:	00 00       	nop
void clearLine(unsigned char x, unsigned char y){

unsigned char max_x=20;

GoTo(x,y);
for (int i=x; i<max_x; i++)
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	c4 31       	cpi	r28, 0x14	; 20
 262:	d1 05       	cpc	r29, r1
 264:	9c f3       	brlt	.-26     	; 0x24c <clearLine+0x16>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 266:	81 2f       	mov	r24, r17
 268:	60 2f       	mov	r22, r16
 26a:	0e 94 06 01 	call	0x20c	; 0x20c <GoTo>
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <key_init>:
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void key_init ()
{
  key_DDRA  |=(1<<key_row0 )|(1<<key_row1); 
 278:	8a b3       	in	r24, 0x1a	; 26
 27a:	83 60       	ori	r24, 0x03	; 3
 27c:	8a bb       	out	0x1a, r24	; 26
  key_DDRC  &=(1<<key_col0 )|(1<<key_col1); 
 27e:	84 b3       	in	r24, 0x14	; 20
 280:	80 7c       	andi	r24, 0xC0	; 192
 282:	84 bb       	out	0x14, r24	; 20
  lcd_init();
 284:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
}
 288:	08 95       	ret

0000028a <key_look>:
void key_look()
{
unsigned char column;
unsigned char lastkey;

			 	lastkey=(key_PINC & 0xC0);
 28a:	93 b3       	in	r25, 0x13	; 19
 28c:	ef e4       	ldi	r30, 0x4F	; 79
 28e:	f3 ec       	ldi	r31, 0xC3	; 195
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <key_look+0x6>
 294:	00 c0       	rjmp	.+0      	; 0x296 <key_look+0xc>
 296:	00 00       	nop
				_delay_ms(20);
				column=(key_PINC & 0xC0);
 298:	83 b3       	in	r24, 0x13	; 19
 29a:	80 7c       	andi	r24, 0xC0	; 192
void key_look()
{
unsigned char column;
unsigned char lastkey;

			 	lastkey=(key_PINC & 0xC0);
 29c:	90 7c       	andi	r25, 0xC0	; 192
				_delay_ms(20);
				column=(key_PINC & 0xC0);
if(column==lastkey)
 29e:	89 17       	cp	r24, r25
 2a0:	d1 f5       	brne	.+116    	; 0x316 <key_look+0x8c>
{
 	switch(column)
 2a2:	80 34       	cpi	r24, 0x40	; 64
 2a4:	79 f0       	breq	.+30     	; 0x2c4 <key_look+0x3a>
 2a6:	80 38       	cpi	r24, 0x80	; 128
 2a8:	c1 f0       	breq	.+48     	; 0x2da <key_look+0x50>
 2aa:	e0 91 2f 01 	lds	r30, 0x012F
 2ae:	88 23       	and	r24, r24
 2b0:	f9 f4       	brne	.+62     	; 0x2f0 <key_look+0x66>
	{
		case 0x00:keyit= keytab[row][3];break;
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e9 57       	subi	r30, 0x79	; 121
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	83 81       	ldd	r24, Z+3	; 0x03
 2c2:	1e c0       	rjmp	.+60     	; 0x300 <key_look+0x76>
		case 0x40:keyit= keytab[row][2];break;///column PC6
 2c4:	e0 91 2f 01 	lds	r30, 0x012F
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	e9 57       	subi	r30, 0x79	; 121
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	82 81       	ldd	r24, Z+2	; 0x02
 2d8:	13 c0       	rjmp	.+38     	; 0x300 <key_look+0x76>
		case 0x80:keyit= keytab[row][1];break;///column PC7
 2da:	e0 91 2f 01 	lds	r30, 0x012F
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	e9 57       	subi	r30, 0x79	; 121
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	81 81       	ldd	r24, Z+1	; 0x01
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <key_look+0x76>
		default  :keyit= keytab[row][0];break; 
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	e9 57       	subi	r30, 0x79	; 121
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	80 81       	ld	r24, Z
 300:	80 93 2e 01 	sts	0x012E, r24
	}
		if(keyit=='C')lcd_cmd_write(CLR_DISPLAY);
 304:	80 91 2e 01 	lds	r24, 0x012E
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	19 f4       	brne	.+6      	; 0x312 <key_look+0x88>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_cmd_write>
			if((keyit=='F')&&(keyit=='E')&&(keyit=='D')&&(keyit=='C')){
			_delay_ms(10);
			}
	 lcd_data_write(keyit);
	 _delay_ms(100);*/ 
	 while (key_PINB & (1<<key_active));
 312:	b2 99       	sbic	0x16, 2	; 22
 314:	fe cf       	rjmp	.-4      	; 0x312 <key_look+0x88>
 316:	08 95       	ret

00000318 <key_read>:
  lcd_init();
}

char key_read()
{
int i= 0 ;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;
 31c:	52 e0       	ldi	r21, 0x02	; 2
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
 31e:	41 e0       	ldi	r20, 0x01	; 1
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 320:	33 e0       	ldi	r19, 0x03	; 3
}

char key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 322:	22 c0       	rjmp	.+68     	; 0x368 <key_read+0x50>
{
switch(i)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	91 05       	cpc	r25, r1
 328:	59 f0       	breq	.+22     	; 0x340 <key_read+0x28>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	79 f0       	breq	.+30     	; 0x34e <key_read+0x36>
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	a1 f4       	brne	.+40     	; 0x35c <key_read+0x44>
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 334:	2b b3       	in	r18, 0x1b	; 27
 336:	2c 7f       	andi	r18, 0xFC	; 252
 338:	2b bb       	out	0x1b, r18	; 27
 33a:	30 93 2f 01 	sts	0x012F, r19
 33e:	13 c0       	rjmp	.+38     	; 0x366 <key_read+0x4e>
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;
 340:	2b b3       	in	r18, 0x1b	; 27
 342:	2c 7f       	andi	r18, 0xFC	; 252
 344:	2b bb       	out	0x1b, r18	; 27
 346:	d8 9a       	sbi	0x1b, 0	; 27
 348:	50 93 2f 01 	sts	0x012F, r21
 34c:	0c c0       	rjmp	.+24     	; 0x366 <key_read+0x4e>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	2c 7f       	andi	r18, 0xFC	; 252
 352:	2b bb       	out	0x1b, r18	; 27
 354:	d9 9a       	sbi	0x1b, 1	; 27
 356:	40 93 2f 01 	sts	0x012F, r20
 35a:	05 c0       	rjmp	.+10     	; 0x366 <key_read+0x4e>
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
 35c:	2b b3       	in	r18, 0x1b	; 27
 35e:	23 60       	ori	r18, 0x03	; 3
 360:	2b bb       	out	0x1b, r18	; 27
 362:	10 92 2f 01 	sts	0x012F, r1
	}
		i++;	
 366:	01 96       	adiw	r24, 0x01	; 1
}

char key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 368:	b2 9b       	sbis	0x16, 2	; 22
 36a:	dc cf       	rjmp	.-72     	; 0x324 <key_read+0xc>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
	}
		i++;	
	}
		key_look();
 36c:	0e 94 45 01 	call	0x28a	; 0x28a <key_look>
		return keyit;
	}
 370:	80 91 2e 01 	lds	r24, 0x012E
 374:	08 95       	ret

00000376 <EnterPassword>:
	 while (key_PINB & (1<<key_active));
	 }
}
//}
	char EnterPassword()
	{
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
for (int z = 0; z < 4; z++)
 37e:	04 e2       	ldi	r16, 0x24	; 36
 380:	11 e0       	ldi	r17, 0x01	; 1
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
			{
			password[z]=key_read();
 386:	0e 94 8c 01 	call	0x318	; 0x318 <key_read>
 38a:	d8 01       	movw	r26, r16
 38c:	8d 93       	st	X+, r24
 38e:	8d 01       	movw	r16, r26
			GoTo(z,1);
 390:	8c 2f       	mov	r24, r28
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	0e 94 06 01 	call	0x20c	; 0x20c <GoTo>
			LCDPutString("          ");
 398:	81 e6       	ldi	r24, 0x61	; 97
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
			GoTo(z,1);
 3a0:	8c 2f       	mov	r24, r28
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	0e 94 06 01 	call	0x20c	; 0x20c <GoTo>
			lcd_data_write('*');
 3a8:	8a e2       	ldi	r24, 0x2A	; 42
 3aa:	0e 94 77 00 	call	0xee	; 0xee <lcd_data_write>
 3ae:	8f eb       	ldi	r24, 0xBF	; 191
 3b0:	97 e2       	ldi	r25, 0x27	; 39
 3b2:	a9 e0       	ldi	r26, 0x09	; 9
 3b4:	81 50       	subi	r24, 0x01	; 1
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	a0 40       	sbci	r26, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <EnterPassword+0x3e>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <EnterPassword+0x48>
 3be:	00 00       	nop
	 }
}
//}
	char EnterPassword()
	{
for (int z = 0; z < 4; z++)
 3c0:	21 96       	adiw	r28, 0x01	; 1
 3c2:	c4 30       	cpi	r28, 0x04	; 4
 3c4:	d1 05       	cpc	r29, r1
 3c6:	f9 f6       	brne	.-66     	; 0x386 <EnterPassword+0x10>
			GoTo(z,1);
			lcd_data_write('*');
			_delay_ms(300);
				 }
			
 if((password[0]=='2')&&(password[1]=='5')&&(password[2]=='0')&&(password[3]=='2'))
 3c8:	80 91 24 01 	lds	r24, 0x0124
 3cc:	82 33       	cpi	r24, 0x32	; 50
 3ce:	a9 f4       	brne	.+42     	; 0x3fa <EnterPassword+0x84>
 3d0:	80 91 25 01 	lds	r24, 0x0125
 3d4:	85 33       	cpi	r24, 0x35	; 53
 3d6:	89 f4       	brne	.+34     	; 0x3fa <EnterPassword+0x84>
 3d8:	80 91 26 01 	lds	r24, 0x0126
 3dc:	80 33       	cpi	r24, 0x30	; 48
 3de:	69 f4       	brne	.+26     	; 0x3fa <EnterPassword+0x84>
 3e0:	80 91 27 01 	lds	r24, 0x0127
 3e4:	82 33       	cpi	r24, 0x32	; 50
 3e6:	49 f4       	brne	.+18     	; 0x3fa <EnterPassword+0x84>
 3e8:	a7 ea       	ldi	r26, 0xA7	; 167
 3ea:	b1 e6       	ldi	r27, 0x61	; 97
 3ec:	11 97       	sbiw	r26, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <EnterPassword+0x76>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <EnterPassword+0x7c>
 3f2:	00 00       	nop
{
			_delay_ms(10);
			RFID_state();
 3f4:	0e 94 46 03 	call	0x68c	; 0x68c <RFID_state>
 3f8:	19 c0       	rjmp	.+50     	; 0x42c <EnterPassword+0xb6>
}
else 
		{ 
		GoTo(0,3);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	63 e0       	ldi	r22, 0x03	; 3
 3fe:	0e 94 06 01 	call	0x20c	; 0x20c <GoTo>
		LCDPutString("try again");
 402:	8c e6       	ldi	r24, 0x6C	; 108
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
 40a:	8f e7       	ldi	r24, 0x7F	; 127
 40c:	94 e8       	ldi	r25, 0x84	; 132
 40e:	ae e1       	ldi	r26, 0x1E	; 30
 410:	81 50       	subi	r24, 0x01	; 1
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	a0 40       	sbci	r26, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <EnterPassword+0x9a>
 418:	00 c0       	rjmp	.+0      	; 0x41a <EnterPassword+0xa4>
 41a:	00 00       	nop
		_delay_ms(1000);
		lcdClear();
 41c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcdClear>
		LCDPutString("     Enter PIN :");
 420:	86 e7       	ldi	r24, 0x76	; 118
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
		EnterPassword();
 428:	0e 94 bb 01 	call	0x376	; 0x376 <EnterPassword>
		} 
	return 1;	
}
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <init_uart>:
#include "UART.h"
	void init_uart(int baudrate)
	{
	UCSRB |=(1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
 438:	2a b1       	in	r18, 0x0a	; 10
 43a:	28 69       	ori	r18, 0x98	; 152
 43c:	2a b9       	out	0x0a, r18	; 10
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 data bits and 1 stop bit 
 43e:	20 b5       	in	r18, 0x20	; 32
 440:	26 68       	ori	r18, 0x86	; 134
 442:	20 bd       	out	0x20, r18	; 32
	UCSRA = (1<<U2X); // full duplex
 444:	22 e0       	ldi	r18, 0x02	; 2
 446:	2b b9       	out	0x0b, r18	; 11

	UBRRH = (char) ( baudrate>>8); // move the upper byte in the integer for fit 8 bits in 16 bits 
 448:	29 2f       	mov	r18, r25
 44a:	33 27       	eor	r19, r19
 44c:	27 fd       	sbrc	r18, 7
 44e:	3a 95       	dec	r19
 450:	20 bd       	out	0x20, r18	; 32
	UBRRL=(char) baudrate;
 452:	89 b9       	out	0x09, r24	; 9

	}
 454:	08 95       	ret

00000456 <uart_transmit>:
	 void uart_transmit(char Abyte)
	{
	 while(!(UCSRA & (1<<UDRE)));
 456:	5d 9b       	sbis	0x0b, 5	; 11
 458:	fe cf       	rjmp	.-4      	; 0x456 <uart_transmit>
	 UDR= Abyte;
 45a:	8c b9       	out	0x0c, r24	; 12
	}
 45c:	08 95       	ret

0000045e <uart_recieve>:
	unsigned char uart_recieve(void)
	{
	while (!(UCSRA &(1<<RXC)));
 45e:	5f 9b       	sbis	0x0b, 7	; 11
 460:	fe cf       	rjmp	.-4      	; 0x45e <uart_recieve>
	return UDR;
 462:	8c b1       	in	r24, 0x0c	; 12
	
	}
 464:	08 95       	ret

00000466 <PutString>:
		void PutString(char *str) {
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	e8 2e       	mov	r14, r24
 470:	e7 01       	movw	r28, r14
 472:	7e 01       	movw	r14, r28
 474:	f9 2e       	mov	r15, r25
 476:	e7 01       	movw	r28, r14
   char c;
   for (; (c = *str) != 0; str++)
 478:	02 c0       	rjmp	.+4      	; 0x47e <PutString+0x18>
    uart_transmit(c); //transmit char handles the individual character
 47a:	0e 94 2b 02 	call	0x456	; 0x456 <uart_transmit>
	return UDR;
	
	}
		void PutString(char *str) {
   char c;
   for (; (c = *str) != 0; str++)
 47e:	89 91       	ld	r24, Y+
 480:	88 23       	and	r24, r24
 482:	d9 f7       	brne	.-10     	; 0x47a <PutString+0x14>
    uart_transmit(c); //transmit char handles the individual character
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	08 95       	ret

0000048e <SPI_MasterInit>:
	#include "SPI.h"

void SPI_MasterInit(void)
		{
		DDRB |=(1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK);
 48e:	87 b3       	in	r24, 0x17	; 23
 490:	80 6b       	ori	r24, 0xB0	; 176
 492:	87 bb       	out	0x17, r24	; 23
		SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 494:	8d b1       	in	r24, 0x0d	; 13
 496:	81 65       	ori	r24, 0x51	; 81
 498:	8d b9       	out	0x0d, r24	; 13
	    PORTB|=(1<<SPI_SS)|(1<<SPI_MISO)|(1<<SPI_SCK);
 49a:	88 b3       	in	r24, 0x18	; 24
 49c:	80 6d       	ori	r24, 0xD0	; 208
 49e:	88 bb       	out	0x18, r24	; 24
		}
 4a0:	08 95       	ret

000004a2 <receiveSPI>:

char receiveSPI(){
	//PORTB &= ~(1<<SPI_SS);
//	SPDR = 0xF5;
	while(!(SPSR & (1<<SPIF))){}
 4a2:	77 9b       	sbis	0x0e, 7	; 14
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <receiveSPI>
	PORTB |= (1<<SPI_SS);
 4a6:	c4 9a       	sbi	0x18, 4	; 24
	return SPDR;
 4a8:	8f b1       	in	r24, 0x0f	; 15
}
 4aa:	08 95       	ret

000004ac <SPI_MasterTransmit>:


		void SPI_MasterTransmit(char data)
		{
		PORTB&=~(1<<SPI_SS);
 4ac:	c4 98       	cbi	0x18, 4	; 24
		SPDR = data;
 4ae:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 4b0:	77 9b       	sbis	0x0e, 7	; 14
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <SPI_MasterTransmit+0x4>
	    PORTB|=(1<<SPI_SS);
 4b4:	c4 9a       	sbi	0x18, 4	; 24
		}
 4b6:	08 95       	ret

000004b8 <sendpacket>:
	char checksum;
	char dataBuffer[50];
/////////////////////////////////////////////////////////////////////////
//                       Public functions                              //
/////////////////////////////////////////////////////////////////////////
void sendpacket(unsigned char command, char data[]){
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	df 93       	push	r29
 4c2:	cf 93       	push	r28
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	c4 56       	subi	r28, 0x64	; 100
 4ca:	d0 40       	sbci	r29, 0x00	; 0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61

	//Construct packet and encode to ASCII
	char buffer[50];
	sprintf(buffer, "%02d%02d%02d0000",
 4d6:	2d b7       	in	r18, 0x3d	; 61
 4d8:	3e b7       	in	r19, 0x3e	; 62
 4da:	2a 50       	subi	r18, 0x0A	; 10
 4dc:	30 40       	sbci	r19, 0x00	; 0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	3e bf       	out	0x3e, r19	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	2d bf       	out	0x3d, r18	; 61
 4e8:	ed b7       	in	r30, 0x3d	; 61
 4ea:	fe b7       	in	r31, 0x3e	; 62
 4ec:	31 96       	adiw	r30, 0x01	; 1
 4ee:	7e 01       	movw	r14, r28
 4f0:	08 94       	sec
 4f2:	e1 1c       	adc	r14, r1
 4f4:	f1 1c       	adc	r15, r1
 4f6:	ad b7       	in	r26, 0x3d	; 61
 4f8:	be b7       	in	r27, 0x3e	; 62
 4fa:	12 96       	adiw	r26, 0x02	; 2
 4fc:	fc 92       	st	X, r15
 4fe:	ee 92       	st	-X, r14
 500:	11 97       	sbiw	r26, 0x01	; 1
 502:	27 e9       	ldi	r18, 0x97	; 151
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	33 83       	std	Z+3, r19	; 0x03
 508:	22 83       	std	Z+2, r18	; 0x02
 50a:	90 91 cb 00 	lds	r25, 0x00CB
 50e:	94 83       	std	Z+4, r25	; 0x04
 510:	15 82       	std	Z+5, r1	; 0x05
 512:	90 91 cc 00 	lds	r25, 0x00CC
 516:	96 83       	std	Z+6, r25	; 0x06
 518:	17 82       	std	Z+7, r1	; 0x07
 51a:	80 87       	std	Z+8, r24	; 0x08
 51c:	11 86       	std	Z+9, r1	; 0x09
 51e:	0e 94 9e 04 	call	0x93c	; 0x93c <sprintf>
		SOURCE,
		DESTINATION,
		command);
		// 	Construct packet and encode to ASCII.
	char packet[50];
	sprintf(packet,"%s%02d", buffer);
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	ed b7       	in	r30, 0x3d	; 61
 52c:	fe b7       	in	r31, 0x3e	; 62
 52e:	31 96       	adiw	r30, 0x01	; 1
 530:	8e 01       	movw	r16, r28
 532:	0d 5c       	subi	r16, 0xCD	; 205
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	ad b7       	in	r26, 0x3d	; 61
 538:	be b7       	in	r27, 0x3e	; 62
 53a:	12 96       	adiw	r26, 0x02	; 2
 53c:	1c 93       	st	X, r17
 53e:	0e 93       	st	-X, r16
 540:	11 97       	sbiw	r26, 0x01	; 1
 542:	88 ea       	ldi	r24, 0xA8	; 168
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	93 83       	std	Z+3, r25	; 0x03
 548:	82 83       	std	Z+2, r24	; 0x02
 54a:	f5 82       	std	Z+5, r15	; 0x05
 54c:	e4 82       	std	Z+4, r14	; 0x04
 54e:	0e 94 9e 04 	call	0x93c	; 0x93c <sprintf>
	//send packet.
	PutString(packet);
 552:	2d b7       	in	r18, 0x3d	; 61
 554:	3e b7       	in	r19, 0x3e	; 62
 556:	2a 5f       	subi	r18, 0xFA	; 250
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	3e bf       	out	0x3e, r19	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	2d bf       	out	0x3d, r18	; 61
 564:	c8 01       	movw	r24, r16
 566:	0e 94 33 02 	call	0x466	; 0x466 <PutString>
	LCDPutString("packet sent");
 56a:	8f ea       	ldi	r24, 0xAF	; 175
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
}
 572:	cc 59       	subi	r28, 0x9C	; 156
 574:	df 4f       	sbci	r29, 0xFF	; 255
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	08 95       	ret

0000058e <receivePacket>:
// Receive packet from the hacs.
// returns 1 if data checksum is correct
// Returns 0 if data checksum is incorrect
void receivePacket(){
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	df 93       	push	r29
 598:	cf 93       	push	r28
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	28 97       	sbiw	r28, 0x08	; 8
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
	char headerBuffer[3] = {0, 0, 0};
 5aa:	1b 82       	std	Y+3, r1	; 0x03
	char packetBuffer[50];
	unsigned char i = 0;
	unsigned char k = 0;
	// receive source = 2 bytes.
	while(i<=1){
		headerBuffer[i] = uart_recieve();
 5ac:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5b6:	8a 83       	std	Y+2, r24	; 0x02
		packetBuffer[k] = headerBuffer[i];
		k++;
		i++;
	}
	source = atoi(headerBuffer);
 5b8:	8e 01       	movw	r16, r28
 5ba:	0f 5f       	subi	r16, 0xFF	; 255
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
 5be:	c8 01       	movw	r24, r16
 5c0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <atoi>
 5c4:	80 93 32 01 	sts	0x0132, r24


	//receive destination = 2 bytes.
	i = 0;
	while(i<=1){
		headerBuffer[i] = uart_recieve();
 5c8:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5cc:	89 83       	std	Y+1, r24	; 0x01
 5ce:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5d2:	8a 83       	std	Y+2, r24	; 0x02
		packetBuffer[k] = headerBuffer[i];
		k++;
		i++;
	}
	destination = atoi(headerBuffer);
 5d4:	c8 01       	movw	r24, r16
 5d6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <atoi>
 5da:	80 93 30 01 	sts	0x0130, r24
	

	//receive command = 2 bytes.
	i = 0;
	while(i<=1){
		headerBuffer[i] = uart_recieve();
 5de:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 5e8:	8a 83       	std	Y+2, r24	; 0x02
		packetBuffer[k] = headerBuffer[i];
		k++;
		i++;
	}
	command = atoi(headerBuffer);
 5ea:	c8 01       	movw	r24, r16
 5ec:	0e 94 78 04 	call	0x8f0	; 0x8f0 <atoi>
 5f0:	80 93 31 01 	sts	0x0131, r24
 5f4:	8e 01       	movw	r16, r28
 5f6:	0c 5f       	subi	r16, 0xFC	; 252
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
	LCDPutString("packet sent");
}
// Receive packet from the hacs.
// returns 1 if data checksum is correct
// Returns 0 if data checksum is incorrect
void receivePacket(){
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	e8 2e       	mov	r14, r24
 5fe:	f1 2c       	mov	r15, r1
 600:	e0 0e       	add	r14, r16
 602:	f1 1e       	adc	r15, r17


	// receive packet size = 4 bytes.
	i = 0;
	while(i<=3){
		sizeBuffer[i] = uart_recieve();
 604:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 608:	f8 01       	movw	r30, r16
 60a:	81 93       	st	Z+, r24
 60c:	8f 01       	movw	r16, r30
	command = atoi(headerBuffer);


	// receive packet size = 4 bytes.
	i = 0;
	while(i<=3){
 60e:	ee 15       	cp	r30, r14
 610:	ff 05       	cpc	r31, r15
 612:	c1 f7       	brne	.-16     	; 0x604 <receivePacket+0x76>
		sizeBuffer[i] = uart_recieve();
		packetBuffer[k] = sizeBuffer[i];
		k++;
		i++;
	}
	sizeBuffer[4] = 0;
 614:	18 86       	std	Y+8, r1	; 0x08
	dataLength = atoi(sizeBuffer);
 616:	ce 01       	movw	r24, r28
 618:	04 96       	adiw	r24, 0x04	; 4
 61a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <atoi>
 61e:	80 93 66 01 	sts	0x0166, r24


	// receive the data.
	i = 0;
 622:	ee 24       	eor	r14, r14
	while(i<dataLength){
 624:	07 c0       	rjmp	.+14     	; 0x634 <receivePacket+0xa6>
		dataBuffer[i] = uart_recieve();
 626:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 62a:	f8 01       	movw	r30, r16
 62c:	ed 5c       	subi	r30, 0xCD	; 205
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	80 83       	st	Z, r24
		packetBuffer[k] = dataBuffer[i];
		k++;
		i++;
 632:	e3 94       	inc	r14
	dataLength = atoi(sizeBuffer);


	// receive the data.
	i = 0;
	while(i<dataLength){
 634:	80 91 66 01 	lds	r24, 0x0166
 638:	0e 2d       	mov	r16, r14
 63a:	10 e0       	ldi	r17, 0x00	; 0
 63c:	e8 16       	cp	r14, r24
 63e:	98 f3       	brcs	.-26     	; 0x626 <receivePacket+0x98>
		dataBuffer[i] = uart_recieve();
		packetBuffer[k] = dataBuffer[i];
		k++;
		i++;
	}
	dataBuffer[i] = 0;
 640:	f8 01       	movw	r30, r16
 642:	ed 5c       	subi	r30, 0xCD	; 205
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	10 82       	st	Z, r1
	packetBuffer[k] = 0;
	LCDPutString("packet recieved");
 648:	8b eb       	ldi	r24, 0xBB	; 187
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
}
 650:	28 96       	adiw	r28, 0x08	; 8
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	cf 91       	pop	r28
 65e:	df 91       	pop	r29
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	08 95       	ret

0000066a <init>:
#include"Timer.h"
	void init ()
	{   
	    DDRB |= 0x01; ///// a 1 on the bit zero of the register B
 66a:	b8 9a       	sbi	0x17, 0	; 23
		PORTB|=0x01; ////  set the out put on the portB LED Off
 66c:	c0 9a       	sbi	0x18, 0	; 24
	    GICR |=(1<<INT0)|(1<<INT1); /// register containing the INT0
 66e:	8b b7       	in	r24, 0x3b	; 59
 670:	80 6c       	ori	r24, 0xC0	; 192
 672:	8b bf       	out	0x3b, r24	; 59
		MCUCR |=(1<<ISC01)|(1<<ISC00)|(1<<ISC10); //risin edge
 674:	85 b7       	in	r24, 0x35	; 53
 676:	87 60       	ori	r24, 0x07	; 7
 678:	85 bf       	out	0x35, r24	; 53
	DDRB |= 0x00; // bit 0 for output
 67a:	87 b3       	in	r24, 0x17	; 23
 67c:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x00; /// LED is Off
 67e:	88 b3       	in	r24, 0x18	; 24
 680:	88 bb       	out	0x18, r24	; 24
    TCCR0 |= (1<<CS01); // timer 0 normal mode 8 prescaler
 682:	83 b7       	in	r24, 0x33	; 51
 684:	82 60       	ori	r24, 0x02	; 2
 686:	83 bf       	out	0x33, r24	; 51
	sei();
 688:	78 94       	sei
	}
 68a:	08 95       	ret

0000068c <RFID_state>:
	char Hexbuffer[2];
	volatile int i=max-1; 
	volatile int j=0;
	volatile int ii=0;
void RFID_state(){
		  if (spi_data_ready==1){
 68c:	80 91 fd 00 	lds	r24, 0x00FD
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	59 f5       	brne	.+86     	; 0x6ea <RFID_state+0x5e>
					spi_data_ready=0;
 694:	10 92 fd 00 	sts	0x00FD, r1
			    	uart_transmit(buffer[i]); // to transmit data into terminal
 698:	e0 91 f5 00 	lds	r30, 0x00F5
 69c:	f0 91 f6 00 	lds	r31, 0x00F6
 6a0:	e7 59       	subi	r30, 0x97	; 151
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 81       	ld	r24, Z
 6a6:	0e 94 2b 02 	call	0x456	; 0x456 <uart_transmit>
					 LCDPutString("Welcome!!!!!");
 6aa:	8d ec       	ldi	r24, 0xCD	; 205
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	98 e0       	ldi	r25, 0x08	; 8
 6b6:	ad e3       	ldi	r26, 0x3D	; 61
 6b8:	81 50       	subi	r24, 0x01	; 1
 6ba:	90 40       	sbci	r25, 0x00	; 0
 6bc:	a0 40       	sbci	r26, 0x00	; 0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <RFID_state+0x2c>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <RFID_state+0x36>
 6c2:	00 00       	nop
					_delay_ms(2000);
					lcdClear();
 6c4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcdClear>
					LCDPutString("Your ID :");
 6c8:	8a ed       	ldi	r24, 0xDA	; 218
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
 6d0:	8f e3       	ldi	r24, 0x3F	; 63
 6d2:	9d e0       	ldi	r25, 0x0D	; 13
 6d4:	a3 e0       	ldi	r26, 0x03	; 3
 6d6:	81 50       	subi	r24, 0x01	; 1
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	a0 40       	sbci	r26, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <RFID_state+0x4a>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <RFID_state+0x54>
 6e0:	00 00       	nop
					_delay_ms(100);	
					LCDPutString(buffer);
 6e2:	89 e6       	ldi	r24, 0x69	; 105
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
 6ea:	08 95       	ret

000006ec <__vector_1>:
					}
				 }
//void intterupts(){

ISR(INT0_vect)
	{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
		LCDPutString("Enter PIN :");
 70e:	84 ee       	ldi	r24, 0xE4	; 228
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCDPutString>
	 SPI_MasterTransmit(0x55);  //getting the uid from rfid tag
 716:	85 e5       	ldi	r24, 0x55	; 85
 718:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
	}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_2>:
	 ISR(INT1_vect)
	 {
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	8f 93       	push	r24
	  TIMSK |=(1<<TOV0);
 74a:	89 b7       	in	r24, 0x39	; 57
 74c:	81 60       	ori	r24, 0x01	; 1
 74e:	89 bf       	out	0x39, r24	; 57
	 
	  if (spi_flag==1)
 750:	80 91 fe 00 	lds	r24, 0x00FE
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	29 f4       	brne	.+10     	; 0x762 <__vector_2+0x24>
	  {
	  
	   TIMSK &=~(1<<TOV0);
 758:	89 b7       	in	r24, 0x39	; 57
 75a:	8e 7f       	andi	r24, 0xFE	; 254
 75c:	89 bf       	out	0x39, r24	; 57
	   spi_flag=0;
 75e:	10 92 fe 00 	sts	0x00FE, r1
	  
	  }
	   spi_flag=1;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 fe 00 	sts	0x00FE, r24
	 }
 768:	8f 91       	pop	r24
 76a:	0f 90       	pop	r0
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	0f 90       	pop	r0
 770:	1f 90       	pop	r1
 772:	18 95       	reti

00000774 <__vector_11>:
	 ISR(TIMER0_OVF_vect)
	 {
 774:	1f 92       	push	r1
 776:	0f 92       	push	r0
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	0f 92       	push	r0
 77c:	11 24       	eor	r1, r1
 77e:	2f 93       	push	r18
 780:	3f 93       	push	r19
 782:	4f 93       	push	r20
 784:	5f 93       	push	r21
 786:	6f 93       	push	r22
 788:	7f 93       	push	r23
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	af 93       	push	r26
 790:	bf 93       	push	r27
 792:	ef 93       	push	r30
 794:	ff 93       	push	r31
		
	  SPI_MasterTransmit(0xF5);
 796:	85 ef       	ldi	r24, 0xF5	; 245
 798:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_MasterTransmit>
	 data=SPDR;
 79c:	2f b1       	in	r18, 0x0f	; 15
 79e:	20 93 fc 00 	sts	0x00FC, r18
	 if((j<max)&&(data!=0x86)){//
 7a2:	80 91 ff 00 	lds	r24, 0x00FF
 7a6:	90 91 00 01 	lds	r25, 0x0100
 7aa:	8e 30       	cpi	r24, 0x0E	; 14
 7ac:	91 05       	cpc	r25, r1
 7ae:	0c f0       	brlt	.+2      	; 0x7b2 <__vector_11+0x3e>
 7b0:	4a c0       	rjmp	.+148    	; 0x846 <__vector_11+0xd2>
 7b2:	26 38       	cpi	r18, 0x86	; 134
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__vector_11+0x44>
 7b6:	47 c0       	rjmp	.+142    	; 0x846 <__vector_11+0xd2>
	 sprintf(Hexbuffer, "%02X", data);
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <__vector_11+0x46>
 7ba:	00 d0       	rcall	.+0      	; 0x7bc <__vector_11+0x48>
 7bc:	00 d0       	rcall	.+0      	; 0x7be <__vector_11+0x4a>
 7be:	ed b7       	in	r30, 0x3d	; 61
 7c0:	fe b7       	in	r31, 0x3e	; 62
 7c2:	31 96       	adiw	r30, 0x01	; 1
 7c4:	87 e6       	ldi	r24, 0x67	; 103
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	ad b7       	in	r26, 0x3d	; 61
 7ca:	be b7       	in	r27, 0x3e	; 62
 7cc:	12 96       	adiw	r26, 0x02	; 2
 7ce:	9c 93       	st	X, r25
 7d0:	8e 93       	st	-X, r24
 7d2:	11 97       	sbiw	r26, 0x01	; 1
 7d4:	80 ef       	ldi	r24, 0xF0	; 240
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	93 83       	std	Z+3, r25	; 0x03
 7da:	82 83       	std	Z+2, r24	; 0x02
 7dc:	24 83       	std	Z+4, r18	; 0x04
 7de:	15 82       	std	Z+5, r1	; 0x05
 7e0:	0e 94 9e 04 	call	0x93c	; 0x93c <sprintf>
		buffer[i]=Hexbuffer[1];
 7e4:	e0 91 f5 00 	lds	r30, 0x00F5
 7e8:	f0 91 f6 00 	lds	r31, 0x00F6
 7ec:	e7 59       	subi	r30, 0x97	; 151
 7ee:	fe 4f       	sbci	r31, 0xFE	; 254
 7f0:	80 91 68 01 	lds	r24, 0x0168
 7f4:	80 83       	st	Z, r24
		i--;
 7f6:	80 91 f5 00 	lds	r24, 0x00F5
 7fa:	90 91 f6 00 	lds	r25, 0x00F6
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	90 93 f6 00 	sts	0x00F6, r25
 804:	80 93 f5 00 	sts	0x00F5, r24
	
		buffer[i]=Hexbuffer[0];
 808:	e0 91 f5 00 	lds	r30, 0x00F5
 80c:	f0 91 f6 00 	lds	r31, 0x00F6
 810:	e7 59       	subi	r30, 0x97	; 151
 812:	fe 4f       	sbci	r31, 0xFE	; 254
 814:	80 91 67 01 	lds	r24, 0x0167
 818:	80 83       	st	Z, r24
		ii=0;
 81a:	10 92 02 01 	sts	0x0102, r1
 81e:	10 92 01 01 	sts	0x0101, r1
		i--;
 822:	80 91 f5 00 	lds	r24, 0x00F5
 826:	90 91 f6 00 	lds	r25, 0x00F6
 82a:	01 97       	sbiw	r24, 0x01	; 1
 82c:	90 93 f6 00 	sts	0x00F6, r25
 830:	80 93 f5 00 	sts	0x00F5, r24
		 PORTB &=0xFE;
 834:	c0 98       	cbi	0x18, 0	; 24
 836:	8d b7       	in	r24, 0x3d	; 61
 838:	9e b7       	in	r25, 0x3e	; 62
 83a:	06 96       	adiw	r24, 0x06	; 6
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	9e bf       	out	0x3e, r25	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	8d bf       	out	0x3d, r24	; 61
		}
	 
	 if (j==max-7) {
 846:	80 91 ff 00 	lds	r24, 0x00FF
 84a:	90 91 00 01 	lds	r25, 0x0100
 84e:	87 30       	cpi	r24, 0x07	; 7
 850:	91 05       	cpc	r25, r1
 852:	71 f4       	brne	.+28     	; 0x870 <__stack+0x11>
	 spi_data_ready=1;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	80 93 fd 00 	sts	0x00FD, r24
	  j=0;
 85a:	10 92 00 01 	sts	0x0100, r1
 85e:	10 92 ff 00 	sts	0x00FF, r1
	 i=max-1;
 862:	8d e0       	ldi	r24, 0x0D	; 13
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	90 93 f6 00 	sts	0x00F6, r25
 86a:	80 93 f5 00 	sts	0x00F5, r24
 86e:	09 c0       	rjmp	.+18     	; 0x882 <__stack+0x23>
	 }
	 else j++;
 870:	80 91 ff 00 	lds	r24, 0x00FF
 874:	90 91 00 01 	lds	r25, 0x0100
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	90 93 00 01 	sts	0x0100, r25
 87e:	80 93 ff 00 	sts	0x00FF, r24
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_13>:
	
	ISR(USART_RXC_vect)
{
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
		lcd_data_write(uart_recieve());
 8c6:	0e 94 2f 02 	call	0x45e	; 0x45e <uart_recieve>
 8ca:	0e 94 77 00 	call	0xee	; 0xee <lcd_data_write>
		  
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <atoi>:
 8f0:	fc 01       	movw	r30, r24
 8f2:	88 27       	eor	r24, r24
 8f4:	99 27       	eor	r25, r25
 8f6:	e8 94       	clt
 8f8:	21 91       	ld	r18, Z+
 8fa:	20 32       	cpi	r18, 0x20	; 32
 8fc:	e9 f3       	breq	.-6      	; 0x8f8 <atoi+0x8>
 8fe:	29 30       	cpi	r18, 0x09	; 9
 900:	10 f0       	brcs	.+4      	; 0x906 <atoi+0x16>
 902:	2e 30       	cpi	r18, 0x0E	; 14
 904:	c8 f3       	brcs	.-14     	; 0x8f8 <atoi+0x8>
 906:	2b 32       	cpi	r18, 0x2B	; 43
 908:	41 f0       	breq	.+16     	; 0x91a <atoi+0x2a>
 90a:	2d 32       	cpi	r18, 0x2D	; 45
 90c:	39 f4       	brne	.+14     	; 0x91c <atoi+0x2c>
 90e:	68 94       	set
 910:	04 c0       	rjmp	.+8      	; 0x91a <atoi+0x2a>
 912:	0e 94 96 04 	call	0x92c	; 0x92c <__mulhi_const_10>
 916:	82 0f       	add	r24, r18
 918:	91 1d       	adc	r25, r1
 91a:	21 91       	ld	r18, Z+
 91c:	20 53       	subi	r18, 0x30	; 48
 91e:	2a 30       	cpi	r18, 0x0A	; 10
 920:	c0 f3       	brcs	.-16     	; 0x912 <atoi+0x22>
 922:	1e f4       	brtc	.+6      	; 0x92a <atoi+0x3a>
 924:	90 95       	com	r25
 926:	81 95       	neg	r24
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	08 95       	ret

0000092c <__mulhi_const_10>:
 92c:	7a e0       	ldi	r23, 0x0A	; 10
 92e:	97 9f       	mul	r25, r23
 930:	90 2d       	mov	r25, r0
 932:	87 9f       	mul	r24, r23
 934:	80 2d       	mov	r24, r0
 936:	91 0d       	add	r25, r1
 938:	11 24       	eor	r1, r1
 93a:	08 95       	ret

0000093c <sprintf>:
 93c:	ae e0       	ldi	r26, 0x0E	; 14
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e4 ea       	ldi	r30, 0xA4	; 164
 942:	f4 e0       	ldi	r31, 0x04	; 4
 944:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__+0x1c>
 948:	0d 89       	ldd	r16, Y+21	; 0x15
 94a:	1e 89       	ldd	r17, Y+22	; 0x16
 94c:	86 e0       	ldi	r24, 0x06	; 6
 94e:	8c 83       	std	Y+4, r24	; 0x04
 950:	1a 83       	std	Y+2, r17	; 0x02
 952:	09 83       	std	Y+1, r16	; 0x01
 954:	8f ef       	ldi	r24, 0xFF	; 255
 956:	9f e7       	ldi	r25, 0x7F	; 127
 958:	9e 83       	std	Y+6, r25	; 0x06
 95a:	8d 83       	std	Y+5, r24	; 0x05
 95c:	9e 01       	movw	r18, r28
 95e:	27 5e       	subi	r18, 0xE7	; 231
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	6f 89       	ldd	r22, Y+23	; 0x17
 968:	78 8d       	ldd	r23, Y+24	; 0x18
 96a:	a9 01       	movw	r20, r18
 96c:	0e 94 c1 04 	call	0x982	; 0x982 <vfprintf>
 970:	ef 81       	ldd	r30, Y+7	; 0x07
 972:	f8 85       	ldd	r31, Y+8	; 0x08
 974:	e0 0f       	add	r30, r16
 976:	f1 1f       	adc	r31, r17
 978:	10 82       	st	Z, r1
 97a:	2e 96       	adiw	r28, 0x0e	; 14
 97c:	e4 e0       	ldi	r30, 0x04	; 4
 97e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__+0x1c>

00000982 <vfprintf>:
 982:	ac e0       	ldi	r26, 0x0C	; 12
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e7 ec       	ldi	r30, 0xC7	; 199
 988:	f4 e0       	ldi	r31, 0x04	; 4
 98a:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__prologue_saves__>
 98e:	6c 01       	movw	r12, r24
 990:	1b 01       	movw	r2, r22
 992:	8a 01       	movw	r16, r20
 994:	fc 01       	movw	r30, r24
 996:	17 82       	std	Z+7, r1	; 0x07
 998:	16 82       	std	Z+6, r1	; 0x06
 99a:	83 81       	ldd	r24, Z+3	; 0x03
 99c:	81 ff       	sbrs	r24, 1
 99e:	d1 c1       	rjmp	.+930    	; 0xd42 <vfprintf+0x3c0>
 9a0:	2e 01       	movw	r4, r28
 9a2:	08 94       	sec
 9a4:	41 1c       	adc	r4, r1
 9a6:	51 1c       	adc	r5, r1
 9a8:	f6 01       	movw	r30, r12
 9aa:	93 81       	ldd	r25, Z+3	; 0x03
 9ac:	f1 01       	movw	r30, r2
 9ae:	93 fd       	sbrc	r25, 3
 9b0:	85 91       	lpm	r24, Z+
 9b2:	93 ff       	sbrs	r25, 3
 9b4:	81 91       	ld	r24, Z+
 9b6:	1f 01       	movw	r2, r30
 9b8:	88 23       	and	r24, r24
 9ba:	09 f4       	brne	.+2      	; 0x9be <vfprintf+0x3c>
 9bc:	be c1       	rjmp	.+892    	; 0xd3a <vfprintf+0x3b8>
 9be:	85 32       	cpi	r24, 0x25	; 37
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <vfprintf+0x4e>
 9c2:	93 fd       	sbrc	r25, 3
 9c4:	85 91       	lpm	r24, Z+
 9c6:	93 ff       	sbrs	r25, 3
 9c8:	81 91       	ld	r24, Z+
 9ca:	1f 01       	movw	r2, r30
 9cc:	85 32       	cpi	r24, 0x25	; 37
 9ce:	29 f4       	brne	.+10     	; 0x9da <vfprintf+0x58>
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	b6 01       	movw	r22, r12
 9d4:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 9d8:	e7 cf       	rjmp	.-50     	; 0x9a8 <vfprintf+0x26>
 9da:	ee 24       	eor	r14, r14
 9dc:	ff 24       	eor	r15, r15
 9de:	20 e0       	ldi	r18, 0x00	; 0
 9e0:	20 32       	cpi	r18, 0x20	; 32
 9e2:	b0 f4       	brcc	.+44     	; 0xa10 <vfprintf+0x8e>
 9e4:	8b 32       	cpi	r24, 0x2B	; 43
 9e6:	69 f0       	breq	.+26     	; 0xa02 <vfprintf+0x80>
 9e8:	8c 32       	cpi	r24, 0x2C	; 44
 9ea:	28 f4       	brcc	.+10     	; 0x9f6 <vfprintf+0x74>
 9ec:	80 32       	cpi	r24, 0x20	; 32
 9ee:	51 f0       	breq	.+20     	; 0xa04 <vfprintf+0x82>
 9f0:	83 32       	cpi	r24, 0x23	; 35
 9f2:	71 f4       	brne	.+28     	; 0xa10 <vfprintf+0x8e>
 9f4:	0b c0       	rjmp	.+22     	; 0xa0c <vfprintf+0x8a>
 9f6:	8d 32       	cpi	r24, 0x2D	; 45
 9f8:	39 f0       	breq	.+14     	; 0xa08 <vfprintf+0x86>
 9fa:	80 33       	cpi	r24, 0x30	; 48
 9fc:	49 f4       	brne	.+18     	; 0xa10 <vfprintf+0x8e>
 9fe:	21 60       	ori	r18, 0x01	; 1
 a00:	2c c0       	rjmp	.+88     	; 0xa5a <vfprintf+0xd8>
 a02:	22 60       	ori	r18, 0x02	; 2
 a04:	24 60       	ori	r18, 0x04	; 4
 a06:	29 c0       	rjmp	.+82     	; 0xa5a <vfprintf+0xd8>
 a08:	28 60       	ori	r18, 0x08	; 8
 a0a:	27 c0       	rjmp	.+78     	; 0xa5a <vfprintf+0xd8>
 a0c:	20 61       	ori	r18, 0x10	; 16
 a0e:	25 c0       	rjmp	.+74     	; 0xa5a <vfprintf+0xd8>
 a10:	27 fd       	sbrc	r18, 7
 a12:	2c c0       	rjmp	.+88     	; 0xa6c <vfprintf+0xea>
 a14:	38 2f       	mov	r19, r24
 a16:	30 53       	subi	r19, 0x30	; 48
 a18:	3a 30       	cpi	r19, 0x0A	; 10
 a1a:	98 f4       	brcc	.+38     	; 0xa42 <vfprintf+0xc0>
 a1c:	26 ff       	sbrs	r18, 6
 a1e:	08 c0       	rjmp	.+16     	; 0xa30 <vfprintf+0xae>
 a20:	8e 2d       	mov	r24, r14
 a22:	88 0f       	add	r24, r24
 a24:	e8 2e       	mov	r14, r24
 a26:	ee 0c       	add	r14, r14
 a28:	ee 0c       	add	r14, r14
 a2a:	e8 0e       	add	r14, r24
 a2c:	e3 0e       	add	r14, r19
 a2e:	15 c0       	rjmp	.+42     	; 0xa5a <vfprintf+0xd8>
 a30:	8f 2d       	mov	r24, r15
 a32:	88 0f       	add	r24, r24
 a34:	f8 2e       	mov	r15, r24
 a36:	ff 0c       	add	r15, r15
 a38:	ff 0c       	add	r15, r15
 a3a:	f8 0e       	add	r15, r24
 a3c:	f3 0e       	add	r15, r19
 a3e:	20 62       	ori	r18, 0x20	; 32
 a40:	0c c0       	rjmp	.+24     	; 0xa5a <vfprintf+0xd8>
 a42:	8e 32       	cpi	r24, 0x2E	; 46
 a44:	21 f4       	brne	.+8      	; 0xa4e <vfprintf+0xcc>
 a46:	26 fd       	sbrc	r18, 6
 a48:	78 c1       	rjmp	.+752    	; 0xd3a <vfprintf+0x3b8>
 a4a:	20 64       	ori	r18, 0x40	; 64
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <vfprintf+0xd8>
 a4e:	8c 36       	cpi	r24, 0x6C	; 108
 a50:	11 f4       	brne	.+4      	; 0xa56 <vfprintf+0xd4>
 a52:	20 68       	ori	r18, 0x80	; 128
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <vfprintf+0xd8>
 a56:	88 36       	cpi	r24, 0x68	; 104
 a58:	49 f4       	brne	.+18     	; 0xa6c <vfprintf+0xea>
 a5a:	f1 01       	movw	r30, r2
 a5c:	93 fd       	sbrc	r25, 3
 a5e:	85 91       	lpm	r24, Z+
 a60:	93 ff       	sbrs	r25, 3
 a62:	81 91       	ld	r24, Z+
 a64:	1f 01       	movw	r2, r30
 a66:	88 23       	and	r24, r24
 a68:	09 f0       	breq	.+2      	; 0xa6c <vfprintf+0xea>
 a6a:	ba cf       	rjmp	.-140    	; 0x9e0 <vfprintf+0x5e>
 a6c:	98 2f       	mov	r25, r24
 a6e:	95 54       	subi	r25, 0x45	; 69
 a70:	93 30       	cpi	r25, 0x03	; 3
 a72:	18 f0       	brcs	.+6      	; 0xa7a <vfprintf+0xf8>
 a74:	90 52       	subi	r25, 0x20	; 32
 a76:	93 30       	cpi	r25, 0x03	; 3
 a78:	28 f4       	brcc	.+10     	; 0xa84 <vfprintf+0x102>
 a7a:	0c 5f       	subi	r16, 0xFC	; 252
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	ff e3       	ldi	r31, 0x3F	; 63
 a80:	f9 83       	std	Y+1, r31	; 0x01
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <vfprintf+0x11c>
 a84:	83 36       	cpi	r24, 0x63	; 99
 a86:	31 f0       	breq	.+12     	; 0xa94 <vfprintf+0x112>
 a88:	83 37       	cpi	r24, 0x73	; 115
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <vfprintf+0x126>
 a8c:	83 35       	cpi	r24, 0x53	; 83
 a8e:	09 f0       	breq	.+2      	; 0xa92 <vfprintf+0x110>
 a90:	60 c0       	rjmp	.+192    	; 0xb52 <vfprintf+0x1d0>
 a92:	22 c0       	rjmp	.+68     	; 0xad8 <vfprintf+0x156>
 a94:	f8 01       	movw	r30, r16
 a96:	80 81       	ld	r24, Z
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	0e 5f       	subi	r16, 0xFE	; 254
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	42 01       	movw	r8, r4
 aa0:	71 e0       	ldi	r23, 0x01	; 1
 aa2:	a7 2e       	mov	r10, r23
 aa4:	b1 2c       	mov	r11, r1
 aa6:	16 c0       	rjmp	.+44     	; 0xad4 <vfprintf+0x152>
 aa8:	62 e0       	ldi	r22, 0x02	; 2
 aaa:	66 2e       	mov	r6, r22
 aac:	71 2c       	mov	r7, r1
 aae:	60 0e       	add	r6, r16
 ab0:	71 1e       	adc	r7, r17
 ab2:	f8 01       	movw	r30, r16
 ab4:	80 80       	ld	r8, Z
 ab6:	91 80       	ldd	r9, Z+1	; 0x01
 ab8:	26 ff       	sbrs	r18, 6
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <vfprintf+0x140>
 abc:	6e 2d       	mov	r22, r14
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x144>
 ac2:	6f ef       	ldi	r22, 0xFF	; 255
 ac4:	7f ef       	ldi	r23, 0xFF	; 255
 ac6:	c4 01       	movw	r24, r8
 ac8:	2c 87       	std	Y+12, r18	; 0x0c
 aca:	0e 94 b3 06 	call	0xd66	; 0xd66 <strnlen>
 ace:	5c 01       	movw	r10, r24
 ad0:	83 01       	movw	r16, r6
 ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ad4:	2f 77       	andi	r18, 0x7F	; 127
 ad6:	17 c0       	rjmp	.+46     	; 0xb06 <vfprintf+0x184>
 ad8:	52 e0       	ldi	r21, 0x02	; 2
 ada:	65 2e       	mov	r6, r21
 adc:	71 2c       	mov	r7, r1
 ade:	60 0e       	add	r6, r16
 ae0:	71 1e       	adc	r7, r17
 ae2:	f8 01       	movw	r30, r16
 ae4:	80 80       	ld	r8, Z
 ae6:	91 80       	ldd	r9, Z+1	; 0x01
 ae8:	26 ff       	sbrs	r18, 6
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <vfprintf+0x170>
 aec:	6e 2d       	mov	r22, r14
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <vfprintf+0x174>
 af2:	6f ef       	ldi	r22, 0xFF	; 255
 af4:	7f ef       	ldi	r23, 0xFF	; 255
 af6:	c4 01       	movw	r24, r8
 af8:	2c 87       	std	Y+12, r18	; 0x0c
 afa:	0e 94 a8 06 	call	0xd50	; 0xd50 <strnlen_P>
 afe:	5c 01       	movw	r10, r24
 b00:	2c 85       	ldd	r18, Y+12	; 0x0c
 b02:	20 68       	ori	r18, 0x80	; 128
 b04:	83 01       	movw	r16, r6
 b06:	23 fd       	sbrc	r18, 3
 b08:	20 c0       	rjmp	.+64     	; 0xb4a <vfprintf+0x1c8>
 b0a:	08 c0       	rjmp	.+16     	; 0xb1c <vfprintf+0x19a>
 b0c:	80 e2       	ldi	r24, 0x20	; 32
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	b6 01       	movw	r22, r12
 b12:	2c 87       	std	Y+12, r18	; 0x0c
 b14:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 b18:	fa 94       	dec	r15
 b1a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b1c:	8f 2d       	mov	r24, r15
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	a8 16       	cp	r10, r24
 b22:	b9 06       	cpc	r11, r25
 b24:	98 f3       	brcs	.-26     	; 0xb0c <vfprintf+0x18a>
 b26:	11 c0       	rjmp	.+34     	; 0xb4a <vfprintf+0x1c8>
 b28:	f4 01       	movw	r30, r8
 b2a:	27 fd       	sbrc	r18, 7
 b2c:	85 91       	lpm	r24, Z+
 b2e:	27 ff       	sbrs	r18, 7
 b30:	81 91       	ld	r24, Z+
 b32:	4f 01       	movw	r8, r30
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	b6 01       	movw	r22, r12
 b38:	2c 87       	std	Y+12, r18	; 0x0c
 b3a:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 b3e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b40:	f1 10       	cpse	r15, r1
 b42:	fa 94       	dec	r15
 b44:	08 94       	sec
 b46:	a1 08       	sbc	r10, r1
 b48:	b1 08       	sbc	r11, r1
 b4a:	a1 14       	cp	r10, r1
 b4c:	b1 04       	cpc	r11, r1
 b4e:	61 f7       	brne	.-40     	; 0xb28 <vfprintf+0x1a6>
 b50:	f1 c0       	rjmp	.+482    	; 0xd34 <vfprintf+0x3b2>
 b52:	84 36       	cpi	r24, 0x64	; 100
 b54:	11 f0       	breq	.+4      	; 0xb5a <vfprintf+0x1d8>
 b56:	89 36       	cpi	r24, 0x69	; 105
 b58:	49 f5       	brne	.+82     	; 0xbac <vfprintf+0x22a>
 b5a:	27 ff       	sbrs	r18, 7
 b5c:	08 c0       	rjmp	.+16     	; 0xb6e <vfprintf+0x1ec>
 b5e:	f8 01       	movw	r30, r16
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	93 81       	ldd	r25, Z+3	; 0x03
 b68:	0c 5f       	subi	r16, 0xFC	; 252
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	09 c0       	rjmp	.+18     	; 0xb80 <vfprintf+0x1fe>
 b6e:	f8 01       	movw	r30, r16
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	88 27       	eor	r24, r24
 b76:	77 fd       	sbrc	r23, 7
 b78:	80 95       	com	r24
 b7a:	98 2f       	mov	r25, r24
 b7c:	0e 5f       	subi	r16, 0xFE	; 254
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	4f e6       	ldi	r20, 0x6F	; 111
 b82:	b4 2e       	mov	r11, r20
 b84:	b2 22       	and	r11, r18
 b86:	97 ff       	sbrs	r25, 7
 b88:	09 c0       	rjmp	.+18     	; 0xb9c <vfprintf+0x21a>
 b8a:	90 95       	com	r25
 b8c:	80 95       	com	r24
 b8e:	70 95       	com	r23
 b90:	61 95       	neg	r22
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	f0 e8       	ldi	r31, 0x80	; 128
 b9a:	bf 2a       	or	r11, r31
 b9c:	a2 01       	movw	r20, r4
 b9e:	2a e0       	ldi	r18, 0x0A	; 10
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__ultoa_invert>
 ba6:	78 2e       	mov	r7, r24
 ba8:	74 18       	sub	r7, r4
 baa:	45 c0       	rjmp	.+138    	; 0xc36 <vfprintf+0x2b4>
 bac:	85 37       	cpi	r24, 0x75	; 117
 bae:	31 f4       	brne	.+12     	; 0xbbc <vfprintf+0x23a>
 bb0:	3f ee       	ldi	r19, 0xEF	; 239
 bb2:	b3 2e       	mov	r11, r19
 bb4:	b2 22       	and	r11, r18
 bb6:	2a e0       	ldi	r18, 0x0A	; 10
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	25 c0       	rjmp	.+74     	; 0xc06 <vfprintf+0x284>
 bbc:	99 ef       	ldi	r25, 0xF9	; 249
 bbe:	b9 2e       	mov	r11, r25
 bc0:	b2 22       	and	r11, r18
 bc2:	8f 36       	cpi	r24, 0x6F	; 111
 bc4:	c1 f0       	breq	.+48     	; 0xbf6 <vfprintf+0x274>
 bc6:	80 37       	cpi	r24, 0x70	; 112
 bc8:	20 f4       	brcc	.+8      	; 0xbd2 <vfprintf+0x250>
 bca:	88 35       	cpi	r24, 0x58	; 88
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <vfprintf+0x24e>
 bce:	b5 c0       	rjmp	.+362    	; 0xd3a <vfprintf+0x3b8>
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <vfprintf+0x26a>
 bd2:	80 37       	cpi	r24, 0x70	; 112
 bd4:	21 f0       	breq	.+8      	; 0xbde <vfprintf+0x25c>
 bd6:	88 37       	cpi	r24, 0x78	; 120
 bd8:	09 f0       	breq	.+2      	; 0xbdc <vfprintf+0x25a>
 bda:	af c0       	rjmp	.+350    	; 0xd3a <vfprintf+0x3b8>
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x260>
 bde:	20 e1       	ldi	r18, 0x10	; 16
 be0:	b2 2a       	or	r11, r18
 be2:	b4 fe       	sbrs	r11, 4
 be4:	0b c0       	rjmp	.+22     	; 0xbfc <vfprintf+0x27a>
 be6:	84 e0       	ldi	r24, 0x04	; 4
 be8:	b8 2a       	or	r11, r24
 bea:	08 c0       	rjmp	.+16     	; 0xbfc <vfprintf+0x27a>
 bec:	b4 fe       	sbrs	r11, 4
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x280>
 bf0:	e6 e0       	ldi	r30, 0x06	; 6
 bf2:	be 2a       	or	r11, r30
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x280>
 bf6:	28 e0       	ldi	r18, 0x08	; 8
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	05 c0       	rjmp	.+10     	; 0xc06 <vfprintf+0x284>
 bfc:	20 e1       	ldi	r18, 0x10	; 16
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x284>
 c02:	20 e1       	ldi	r18, 0x10	; 16
 c04:	32 e0       	ldi	r19, 0x02	; 2
 c06:	b7 fe       	sbrs	r11, 7
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <vfprintf+0x298>
 c0a:	f8 01       	movw	r30, r16
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	0c 5f       	subi	r16, 0xFC	; 252
 c16:	1f 4f       	sbci	r17, 0xFF	; 255
 c18:	07 c0       	rjmp	.+14     	; 0xc28 <vfprintf+0x2a6>
 c1a:	f8 01       	movw	r30, r16
 c1c:	60 81       	ld	r22, Z
 c1e:	71 81       	ldd	r23, Z+1	; 0x01
 c20:	80 e0       	ldi	r24, 0x00	; 0
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 5f       	subi	r16, 0xFE	; 254
 c26:	1f 4f       	sbci	r17, 0xFF	; 255
 c28:	a2 01       	movw	r20, r4
 c2a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__ultoa_invert>
 c2e:	78 2e       	mov	r7, r24
 c30:	74 18       	sub	r7, r4
 c32:	ff e7       	ldi	r31, 0x7F	; 127
 c34:	bf 22       	and	r11, r31
 c36:	b6 fe       	sbrs	r11, 6
 c38:	0b c0       	rjmp	.+22     	; 0xc50 <vfprintf+0x2ce>
 c3a:	2e ef       	ldi	r18, 0xFE	; 254
 c3c:	b2 22       	and	r11, r18
 c3e:	7e 14       	cp	r7, r14
 c40:	38 f4       	brcc	.+14     	; 0xc50 <vfprintf+0x2ce>
 c42:	b4 fe       	sbrs	r11, 4
 c44:	07 c0       	rjmp	.+14     	; 0xc54 <vfprintf+0x2d2>
 c46:	b2 fc       	sbrc	r11, 2
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <vfprintf+0x2d2>
 c4a:	8f ee       	ldi	r24, 0xEF	; 239
 c4c:	b8 22       	and	r11, r24
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x2d2>
 c50:	a7 2c       	mov	r10, r7
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x2d4>
 c54:	ae 2c       	mov	r10, r14
 c56:	8b 2d       	mov	r24, r11
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	b4 fe       	sbrs	r11, 4
 c5c:	0d c0       	rjmp	.+26     	; 0xc78 <vfprintf+0x2f6>
 c5e:	fe 01       	movw	r30, r28
 c60:	e7 0d       	add	r30, r7
 c62:	f1 1d       	adc	r31, r1
 c64:	20 81       	ld	r18, Z
 c66:	20 33       	cpi	r18, 0x30	; 48
 c68:	19 f4       	brne	.+6      	; 0xc70 <vfprintf+0x2ee>
 c6a:	e9 ee       	ldi	r30, 0xE9	; 233
 c6c:	be 22       	and	r11, r30
 c6e:	09 c0       	rjmp	.+18     	; 0xc82 <vfprintf+0x300>
 c70:	a3 94       	inc	r10
 c72:	b2 fe       	sbrs	r11, 2
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <vfprintf+0x300>
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <vfprintf+0x2fe>
 c78:	86 78       	andi	r24, 0x86	; 134
 c7a:	90 70       	andi	r25, 0x00	; 0
 c7c:	00 97       	sbiw	r24, 0x00	; 0
 c7e:	09 f0       	breq	.+2      	; 0xc82 <vfprintf+0x300>
 c80:	a3 94       	inc	r10
 c82:	8b 2c       	mov	r8, r11
 c84:	99 24       	eor	r9, r9
 c86:	b3 fc       	sbrc	r11, 3
 c88:	14 c0       	rjmp	.+40     	; 0xcb2 <vfprintf+0x330>
 c8a:	b0 fe       	sbrs	r11, 0
 c8c:	0f c0       	rjmp	.+30     	; 0xcac <vfprintf+0x32a>
 c8e:	af 14       	cp	r10, r15
 c90:	28 f4       	brcc	.+10     	; 0xc9c <vfprintf+0x31a>
 c92:	e7 2c       	mov	r14, r7
 c94:	ef 0c       	add	r14, r15
 c96:	ea 18       	sub	r14, r10
 c98:	af 2c       	mov	r10, r15
 c9a:	08 c0       	rjmp	.+16     	; 0xcac <vfprintf+0x32a>
 c9c:	e7 2c       	mov	r14, r7
 c9e:	06 c0       	rjmp	.+12     	; 0xcac <vfprintf+0x32a>
 ca0:	80 e2       	ldi	r24, 0x20	; 32
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	b6 01       	movw	r22, r12
 ca6:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 caa:	a3 94       	inc	r10
 cac:	af 14       	cp	r10, r15
 cae:	c0 f3       	brcs	.-16     	; 0xca0 <vfprintf+0x31e>
 cb0:	04 c0       	rjmp	.+8      	; 0xcba <vfprintf+0x338>
 cb2:	af 14       	cp	r10, r15
 cb4:	10 f4       	brcc	.+4      	; 0xcba <vfprintf+0x338>
 cb6:	fa 18       	sub	r15, r10
 cb8:	01 c0       	rjmp	.+2      	; 0xcbc <vfprintf+0x33a>
 cba:	ff 24       	eor	r15, r15
 cbc:	84 fe       	sbrs	r8, 4
 cbe:	0f c0       	rjmp	.+30     	; 0xcde <vfprintf+0x35c>
 cc0:	80 e3       	ldi	r24, 0x30	; 48
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	b6 01       	movw	r22, r12
 cc6:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 cca:	82 fe       	sbrs	r8, 2
 ccc:	1f c0       	rjmp	.+62     	; 0xd0c <vfprintf+0x38a>
 cce:	81 fe       	sbrs	r8, 1
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x356>
 cd2:	88 e5       	ldi	r24, 0x58	; 88
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <vfprintf+0x376>
 cd8:	88 e7       	ldi	r24, 0x78	; 120
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <vfprintf+0x376>
 cde:	c4 01       	movw	r24, r8
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	90 70       	andi	r25, 0x00	; 0
 ce4:	00 97       	sbiw	r24, 0x00	; 0
 ce6:	91 f0       	breq	.+36     	; 0xd0c <vfprintf+0x38a>
 ce8:	81 fc       	sbrc	r8, 1
 cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0x36e>
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	01 c0       	rjmp	.+2      	; 0xcf2 <vfprintf+0x370>
 cf0:	8b e2       	ldi	r24, 0x2B	; 43
 cf2:	b7 fc       	sbrc	r11, 7
 cf4:	8d e2       	ldi	r24, 0x2D	; 45
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	b6 01       	movw	r22, r12
 cfa:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x38a>
 d00:	80 e3       	ldi	r24, 0x30	; 48
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	b6 01       	movw	r22, r12
 d06:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d0a:	ea 94       	dec	r14
 d0c:	7e 14       	cp	r7, r14
 d0e:	c0 f3       	brcs	.-16     	; 0xd00 <vfprintf+0x37e>
 d10:	7a 94       	dec	r7
 d12:	f2 01       	movw	r30, r4
 d14:	e7 0d       	add	r30, r7
 d16:	f1 1d       	adc	r31, r1
 d18:	80 81       	ld	r24, Z
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	b6 01       	movw	r22, r12
 d1e:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d22:	77 20       	and	r7, r7
 d24:	a9 f7       	brne	.-22     	; 0xd10 <vfprintf+0x38e>
 d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0x3b2>
 d28:	80 e2       	ldi	r24, 0x20	; 32
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	b6 01       	movw	r22, r12
 d2e:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d32:	fa 94       	dec	r15
 d34:	ff 20       	and	r15, r15
 d36:	c1 f7       	brne	.-16     	; 0xd28 <vfprintf+0x3a6>
 d38:	37 ce       	rjmp	.-914    	; 0x9a8 <vfprintf+0x26>
 d3a:	f6 01       	movw	r30, r12
 d3c:	26 81       	ldd	r18, Z+6	; 0x06
 d3e:	37 81       	ldd	r19, Z+7	; 0x07
 d40:	02 c0       	rjmp	.+4      	; 0xd46 <vfprintf+0x3c4>
 d42:	2f ef       	ldi	r18, 0xFF	; 255
 d44:	3f ef       	ldi	r19, 0xFF	; 255
 d46:	c9 01       	movw	r24, r18
 d48:	2c 96       	adiw	r28, 0x0c	; 12
 d4a:	e2 e1       	ldi	r30, 0x12	; 18
 d4c:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__epilogue_restores__>

00000d50 <strnlen_P>:
 d50:	fc 01       	movw	r30, r24
 d52:	05 90       	lpm	r0, Z+
 d54:	61 50       	subi	r22, 0x01	; 1
 d56:	70 40       	sbci	r23, 0x00	; 0
 d58:	01 10       	cpse	r0, r1
 d5a:	d8 f7       	brcc	.-10     	; 0xd52 <strnlen_P+0x2>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	8e 0f       	add	r24, r30
 d62:	9f 1f       	adc	r25, r31
 d64:	08 95       	ret

00000d66 <strnlen>:
 d66:	fc 01       	movw	r30, r24
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 90       	ld	r0, Z+
 d6e:	01 10       	cpse	r0, r1
 d70:	d8 f7       	brcc	.-10     	; 0xd68 <strnlen+0x2>
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	8e 0f       	add	r24, r30
 d78:	9f 1f       	adc	r25, r31
 d7a:	08 95       	ret

00000d7c <fputc>:
 d7c:	0f 93       	push	r16
 d7e:	1f 93       	push	r17
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	8c 01       	movw	r16, r24
 d86:	eb 01       	movw	r28, r22
 d88:	8b 81       	ldd	r24, Y+3	; 0x03
 d8a:	81 ff       	sbrs	r24, 1
 d8c:	1b c0       	rjmp	.+54     	; 0xdc4 <fputc+0x48>
 d8e:	82 ff       	sbrs	r24, 2
 d90:	0d c0       	rjmp	.+26     	; 0xdac <fputc+0x30>
 d92:	2e 81       	ldd	r18, Y+6	; 0x06
 d94:	3f 81       	ldd	r19, Y+7	; 0x07
 d96:	8c 81       	ldd	r24, Y+4	; 0x04
 d98:	9d 81       	ldd	r25, Y+5	; 0x05
 d9a:	28 17       	cp	r18, r24
 d9c:	39 07       	cpc	r19, r25
 d9e:	64 f4       	brge	.+24     	; 0xdb8 <fputc+0x3c>
 da0:	e8 81       	ld	r30, Y
 da2:	f9 81       	ldd	r31, Y+1	; 0x01
 da4:	01 93       	st	Z+, r16
 da6:	f9 83       	std	Y+1, r31	; 0x01
 da8:	e8 83       	st	Y, r30
 daa:	06 c0       	rjmp	.+12     	; 0xdb8 <fputc+0x3c>
 dac:	e8 85       	ldd	r30, Y+8	; 0x08
 dae:	f9 85       	ldd	r31, Y+9	; 0x09
 db0:	80 2f       	mov	r24, r16
 db2:	09 95       	icall
 db4:	00 97       	sbiw	r24, 0x00	; 0
 db6:	31 f4       	brne	.+12     	; 0xdc4 <fputc+0x48>
 db8:	8e 81       	ldd	r24, Y+6	; 0x06
 dba:	9f 81       	ldd	r25, Y+7	; 0x07
 dbc:	01 96       	adiw	r24, 0x01	; 1
 dbe:	9f 83       	std	Y+7, r25	; 0x07
 dc0:	8e 83       	std	Y+6, r24	; 0x06
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <fputc+0x4c>
 dc4:	0f ef       	ldi	r16, 0xFF	; 255
 dc6:	1f ef       	ldi	r17, 0xFF	; 255
 dc8:	c8 01       	movw	r24, r16
 dca:	df 91       	pop	r29
 dcc:	cf 91       	pop	r28
 dce:	1f 91       	pop	r17
 dd0:	0f 91       	pop	r16
 dd2:	08 95       	ret

00000dd4 <__ultoa_invert>:
 dd4:	fa 01       	movw	r30, r20
 dd6:	aa 27       	eor	r26, r26
 dd8:	28 30       	cpi	r18, 0x08	; 8
 dda:	51 f1       	breq	.+84     	; 0xe30 <__ultoa_invert+0x5c>
 ddc:	20 31       	cpi	r18, 0x10	; 16
 dde:	81 f1       	breq	.+96     	; 0xe40 <__ultoa_invert+0x6c>
 de0:	e8 94       	clt
 de2:	6f 93       	push	r22
 de4:	6e 7f       	andi	r22, 0xFE	; 254
 de6:	6e 5f       	subi	r22, 0xFE	; 254
 de8:	7f 4f       	sbci	r23, 0xFF	; 255
 dea:	8f 4f       	sbci	r24, 0xFF	; 255
 dec:	9f 4f       	sbci	r25, 0xFF	; 255
 dee:	af 4f       	sbci	r26, 0xFF	; 255
 df0:	b1 e0       	ldi	r27, 0x01	; 1
 df2:	3e d0       	rcall	.+124    	; 0xe70 <__ultoa_invert+0x9c>
 df4:	b4 e0       	ldi	r27, 0x04	; 4
 df6:	3c d0       	rcall	.+120    	; 0xe70 <__ultoa_invert+0x9c>
 df8:	67 0f       	add	r22, r23
 dfa:	78 1f       	adc	r23, r24
 dfc:	89 1f       	adc	r24, r25
 dfe:	9a 1f       	adc	r25, r26
 e00:	a1 1d       	adc	r26, r1
 e02:	68 0f       	add	r22, r24
 e04:	79 1f       	adc	r23, r25
 e06:	8a 1f       	adc	r24, r26
 e08:	91 1d       	adc	r25, r1
 e0a:	a1 1d       	adc	r26, r1
 e0c:	6a 0f       	add	r22, r26
 e0e:	71 1d       	adc	r23, r1
 e10:	81 1d       	adc	r24, r1
 e12:	91 1d       	adc	r25, r1
 e14:	a1 1d       	adc	r26, r1
 e16:	20 d0       	rcall	.+64     	; 0xe58 <__ultoa_invert+0x84>
 e18:	09 f4       	brne	.+2      	; 0xe1c <__ultoa_invert+0x48>
 e1a:	68 94       	set
 e1c:	3f 91       	pop	r19
 e1e:	2a e0       	ldi	r18, 0x0A	; 10
 e20:	26 9f       	mul	r18, r22
 e22:	11 24       	eor	r1, r1
 e24:	30 19       	sub	r19, r0
 e26:	30 5d       	subi	r19, 0xD0	; 208
 e28:	31 93       	st	Z+, r19
 e2a:	de f6       	brtc	.-74     	; 0xde2 <__ultoa_invert+0xe>
 e2c:	cf 01       	movw	r24, r30
 e2e:	08 95       	ret
 e30:	46 2f       	mov	r20, r22
 e32:	47 70       	andi	r20, 0x07	; 7
 e34:	40 5d       	subi	r20, 0xD0	; 208
 e36:	41 93       	st	Z+, r20
 e38:	b3 e0       	ldi	r27, 0x03	; 3
 e3a:	0f d0       	rcall	.+30     	; 0xe5a <__ultoa_invert+0x86>
 e3c:	c9 f7       	brne	.-14     	; 0xe30 <__ultoa_invert+0x5c>
 e3e:	f6 cf       	rjmp	.-20     	; 0xe2c <__ultoa_invert+0x58>
 e40:	46 2f       	mov	r20, r22
 e42:	4f 70       	andi	r20, 0x0F	; 15
 e44:	40 5d       	subi	r20, 0xD0	; 208
 e46:	4a 33       	cpi	r20, 0x3A	; 58
 e48:	18 f0       	brcs	.+6      	; 0xe50 <__ultoa_invert+0x7c>
 e4a:	49 5d       	subi	r20, 0xD9	; 217
 e4c:	31 fd       	sbrc	r19, 1
 e4e:	40 52       	subi	r20, 0x20	; 32
 e50:	41 93       	st	Z+, r20
 e52:	02 d0       	rcall	.+4      	; 0xe58 <__ultoa_invert+0x84>
 e54:	a9 f7       	brne	.-22     	; 0xe40 <__ultoa_invert+0x6c>
 e56:	ea cf       	rjmp	.-44     	; 0xe2c <__ultoa_invert+0x58>
 e58:	b4 e0       	ldi	r27, 0x04	; 4
 e5a:	a6 95       	lsr	r26
 e5c:	97 95       	ror	r25
 e5e:	87 95       	ror	r24
 e60:	77 95       	ror	r23
 e62:	67 95       	ror	r22
 e64:	ba 95       	dec	r27
 e66:	c9 f7       	brne	.-14     	; 0xe5a <__ultoa_invert+0x86>
 e68:	00 97       	sbiw	r24, 0x00	; 0
 e6a:	61 05       	cpc	r22, r1
 e6c:	71 05       	cpc	r23, r1
 e6e:	08 95       	ret
 e70:	9b 01       	movw	r18, r22
 e72:	ac 01       	movw	r20, r24
 e74:	0a 2e       	mov	r0, r26
 e76:	06 94       	lsr	r0
 e78:	57 95       	ror	r21
 e7a:	47 95       	ror	r20
 e7c:	37 95       	ror	r19
 e7e:	27 95       	ror	r18
 e80:	ba 95       	dec	r27
 e82:	c9 f7       	brne	.-14     	; 0xe76 <__ultoa_invert+0xa2>
 e84:	62 0f       	add	r22, r18
 e86:	73 1f       	adc	r23, r19
 e88:	84 1f       	adc	r24, r20
 e8a:	95 1f       	adc	r25, r21
 e8c:	a0 1d       	adc	r26, r0
 e8e:	08 95       	ret

00000e90 <__prologue_saves__>:
 e90:	2f 92       	push	r2
 e92:	3f 92       	push	r3
 e94:	4f 92       	push	r4
 e96:	5f 92       	push	r5
 e98:	6f 92       	push	r6
 e9a:	7f 92       	push	r7
 e9c:	8f 92       	push	r8
 e9e:	9f 92       	push	r9
 ea0:	af 92       	push	r10
 ea2:	bf 92       	push	r11
 ea4:	cf 92       	push	r12
 ea6:	df 92       	push	r13
 ea8:	ef 92       	push	r14
 eaa:	ff 92       	push	r15
 eac:	0f 93       	push	r16
 eae:	1f 93       	push	r17
 eb0:	cf 93       	push	r28
 eb2:	df 93       	push	r29
 eb4:	cd b7       	in	r28, 0x3d	; 61
 eb6:	de b7       	in	r29, 0x3e	; 62
 eb8:	ca 1b       	sub	r28, r26
 eba:	db 0b       	sbc	r29, r27
 ebc:	0f b6       	in	r0, 0x3f	; 63
 ebe:	f8 94       	cli
 ec0:	de bf       	out	0x3e, r29	; 62
 ec2:	0f be       	out	0x3f, r0	; 63
 ec4:	cd bf       	out	0x3d, r28	; 61
 ec6:	09 94       	ijmp

00000ec8 <__epilogue_restores__>:
 ec8:	2a 88       	ldd	r2, Y+18	; 0x12
 eca:	39 88       	ldd	r3, Y+17	; 0x11
 ecc:	48 88       	ldd	r4, Y+16	; 0x10
 ece:	5f 84       	ldd	r5, Y+15	; 0x0f
 ed0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ed2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ed4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed8:	aa 84       	ldd	r10, Y+10	; 0x0a
 eda:	b9 84       	ldd	r11, Y+9	; 0x09
 edc:	c8 84       	ldd	r12, Y+8	; 0x08
 ede:	df 80       	ldd	r13, Y+7	; 0x07
 ee0:	ee 80       	ldd	r14, Y+6	; 0x06
 ee2:	fd 80       	ldd	r15, Y+5	; 0x05
 ee4:	0c 81       	ldd	r16, Y+4	; 0x04
 ee6:	1b 81       	ldd	r17, Y+3	; 0x03
 ee8:	aa 81       	ldd	r26, Y+2	; 0x02
 eea:	b9 81       	ldd	r27, Y+1	; 0x01
 eec:	ce 0f       	add	r28, r30
 eee:	d1 1d       	adc	r29, r1
 ef0:	0f b6       	in	r0, 0x3f	; 63
 ef2:	f8 94       	cli
 ef4:	de bf       	out	0x3e, r29	; 62
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	cd bf       	out	0x3d, r28	; 61
 efa:	ed 01       	movw	r28, r26
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
